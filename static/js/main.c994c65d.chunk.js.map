{"version":3,"sources":["components/Card.js","App.js","index.js"],"names":["Card","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevState","resetTurn","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAEe,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAO1D,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACEF,UAAU,QACVC,IAAI,gBACJC,IAAI,aACJC,QAdY,WACbJ,GACHF,EAAaD,WCDnB,IAAMQ,EAAa,CACjB,CAAEH,IAAK,qBAAsBI,SAAS,GACtC,CAAEJ,IAAK,2BAA4BI,SAAS,GAC5C,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,kBAAmBI,SAAS,GACnC,CAAEJ,IAAK,gBAAiBI,SAAS,GACjC,CAAEJ,IAAK,gBAAiBI,SAAS,IA4EpBC,MAzEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGqBJ,mBAAS,MAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIqBN,mBAAS,MAJ9B,mBAINO,EAJM,KAIKC,EAJL,OAKmBR,oBAAS,GAL5B,mBAKNR,EALM,KAKIiB,EALJ,KAOPC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC1B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB2B,GAAIH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAGLd,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAGhD4B,qBAAU,WACJZ,GAAaE,IACfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAACgB,GACR,OAAOA,EAAUH,KAAI,SAAC1B,GACpB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAKL,GAAZ,IAAkBS,SAAS,IAEpBT,QAIb8B,KAEAC,YAAW,kBAAMD,MAAa,QAGjC,CAACd,EAAWE,IAEf,IAAMY,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAACc,GAAD,OAAeA,EAAY,KACpCT,GAAY,IAOd,OAJAQ,qBAAU,WACRP,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBACA,6CAAgBP,KAChB,qBAAKV,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAC1B,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GAJLH,EAAK2B,aCrEtBK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c994c65d.chunk.js","sourcesContent":["import \"./Card.css\";\n\nexport default function Card({ card, handleChoice, flipped, disabled }) {\n  const handleClick = () => {\n    if (!disabled) {\n      handleChoice(card);\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <div className={flipped ? \"flipped\" : \"\"}>\n        <img className=\"front\" src={card.src} alt=\"card front\" />\n        <img\n          className=\"cover\"\n          src=\"/img/logo.png\"\n          alt=\"card cover\"\n          onClick={handleClick}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/Card\";\n\nconst cardImages = [\n  { src: \"/img/Chase_PNG.png\", matched: false },\n  { src: \"/img/Everest_sitinig.png\", matched: false },\n  { src: \"/img/Marshall.png\", matched: false },\n  { src: \"/img/Rubble.png\", matched: false },\n  { src: \"/img/Skye.png\", matched: false },\n  { src: \"/img/Zuma.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevState) => {\n          return prevState.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevState) => prevState + 1);\n    setDisabled(false);\n  };\n\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Memory game</h1>\n      <button onClick={shuffleCards}>Nowa gra</button>\n      <p>Liczba tur: {turns}</p>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}